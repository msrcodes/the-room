import type { NextPage } from 'next'
import Head from 'next/head'
import { io, Socket } from 'socket.io-client'
import { useEffect, useState } from 'react'
import { ClientToServerEvents, ServerToClientEvents } from '../utils/socket'
import { env } from '../env/client.mjs'

// import { trpc } from "../utils/trpc";

const Home: NextPage = () => {
	// const hello = trpc.proxy.example.hello.useQuery({ text: "from tRPC" });
	const [socket, setSocket] =
		useState<Socket<ServerToClientEvents, ClientToServerEvents>>()

	useEffect(() => {
		console.log(`Making socket request to ${env.NEXT_PUBLIC_SOCKET_PATH}`)
		fetch(env.NEXT_PUBLIC_SOCKET_PATH).then(() => {
			console.log('Initialising socket')
			const socket: Socket<ServerToClientEvents, ClientToServerEvents> = io({
				path: env.NEXT_PUBLIC_SOCKET_PATH,
			})

			socket.on('connect', () => {
				console.log('SOCKET CONNECTED!', socket.id)
				setSocket(socket)
			})

			if (socket)
				return () => {
					socket.disconnect()
				}
		})
	}, [])

	return (
		<>
			<Head>
				<title>Create T3 App</title>
				<meta name='description' content='Generated by create-t3-app' />
				<link rel='icon' href='/favicon.ico' />
			</Head>
			<main className='container flex flex-col items-center justify-center min-h-screen p-4 mx-auto'>
				<h1>
					{socket && socket.connected ? 'Connected!' : 'Not connected :('}
				</h1>
				{socket && (
					<button
						onClick={() => {
							console.log('saying hello')
							socket.emit('hello')
						}}
					>
						Send a message
					</button>
				)}
			</main>
		</>
	)
}

export default Home
